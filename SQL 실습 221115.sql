-- 21 <교수> 테이블에서 '김'씨 성을 가진 교수의 자료를 검색하는 SQL문을 작성하시오.
	SELECT * 
    FROM 교수 
    WHERE 이름 LIKE '김%';

-- 22 <학과> 테이블에서 학과 이름에 '공학'이 포함되어 있는 학과의 정보를 검색하는 SQL문을 작성하시오.
	SELECT * 
    FROM 학과 
    WHERE 학과명 LIKE '%공학%';
        
-- 23 <과목> 테이블에서 과목의 영문 이름이 'C'로 시작하여 입으로 끝나는 과목의 '과목번호', '과목명', '영문명' 가져오는 SQL문을 작성하시오.
    SELECT 과목번호, 과목명, 영문명 
    FROM 과목 WHERE 영문명 LIKE 'C%';

-- 24 <학생> 테이블에서 학생 이름이 '○○준'과 같은 이름을 가진 학생의 자료를 가져오는 SQL문을 작성하시오.
    SELECT * 
    FROM 학생 
    WHERE 이름 LIKE '%준';

-- 25 <수강신청내역> 테이블에서 '과목번호'가 'K20045'이거나 'K20056'이고 평점'이 3인 레코드의 '수강신청번호', '과목번호', '평점'을 가져오는 SQL문을 작성하시오.
	SELECT 수강신청번호, 과목번호, 평점 
    FROM 수강신청내역 
    WHERE 과목번호 IN('K20045', 'K20056') AND 평점 = '3';

-- 26 <수강신청내역> 테이블에서 '과목번호'가 'K20045’, ‘K20056’, ‘Y00132' 인 과목의 '수강신청번호', '과목번호', '평점'을 가져오는 SQL문을 IN 연산자를 이용하여 작성하시오. '과목번호' 필드를 기준으로 오름차순으로 정렬하시오.
	SELECT 수강신청번호, 과목번호, 평점 
    FROM 수강신청내역 
    WHERE 과목번호 IN('K20045',  'K20056', 'Y00132') 
    ORDER BY 과목번호;

-- 27 <수강신청내역> 테이블에서 '평점'이 -1이 아닌 레코드의 자료를 가져오는 SQL문을 작성하시오.
	SELECT * 
    FROM 수강신청내역 
    WHERE 평점 != '-1';
    
-- 28 <학생> 테이블에서 18학번 학생들의 '학번', '이름', '시도'을 가져오는 SQL문을 작성하시오.
	SELECT 학번, 이름, 시도 
    FROM 학생 
    WHERE 학번 LIKE '18%';

-- 29 〈학생〉 테이블에서 주소 중에 시군구' 필드가 '구'로 끝나는 학생들의 ‘학번’, '이름', '시도', 시군구'를 가져오는 SQL문을 작성하시오.
	SELECT 학번, 이름, 시도, 시군구 
    FROM 학생 
    WHERE 시군구 LIKE '%구'; 

-- 30 <과목> 테이블에서 '영문명'이 'I'로 시작하여 'n'으로 끝나는 과목의 '과목번호, ’과목명', '영문명'을 가져오는 SQL문을 작성하시오.
	SELECT 과목번호, 과목명, 영문명 
    FROM 과목 
    WHERE 영문명 LIKE 'I%n';
    
-- 31 <과목> 테이블에서 '과목명'이 ‘컴퓨터ㅇㅇ'와 같은 이름을 가진 과목의 '과목번호', '과목', '영문명'을 가져오는 SQL문을 작성하시오.
	SELECT 과목번호, 과목명, 영문명 
    FROM 과목 
    WHERE 과목명 LIKE '컴퓨터%';
   
-- 32 <학생> 테이블에서 학생의 이름에 '서'자가 들어가는 학생의 '학번', '학과'. '이름’, ‘시도'를 가져오는 SQL문을 작성하시오.
	SELECT 학번, 학과, 이름, 시도 
    FROM 학생 
    WHERE 이름 LIKE '%서%';
    
-- 33 <학생> 테이블에서 '이름', '주소’, ‘시군구', '시도', '우편번호의 정보를 묶어서 아래와 같이 하나의 필드처럼 보이도록 가져오는 SQL문을 작성하시오. (묶은 필드의 이름은 '학생정보'로 출력한다. '이름'으로 정렬하시오.)
	SELECT GROUP_CONCAT(이름, '(', 우편번호, ' ', 시도,' ', 시군구,' ', 주소 ,')') AS '학생정보' 
    FROM 학생 
    GROUP BY 이름; 

-- 34 <과목> 테이블에서 '과목명', '담당교수' 필드를 가져와서 '담당교수' 필드의 별명을 담당교수사번'으로 바꾸어 출력하는 SQL문을 작성하시오.
    SELECT 과목명, 담당교수 AS '담당교수사번' 
    FROM 과목;

-- 35 <수강신청> 테이블에서 아래와 같이 '학번'이 '1801001'인 학생의 수강신청 자료를 출력하도록 SQL문을 작성하시오.
    SELECT * 
    FROM 수강신청 
    WHERE 학번 = '1801001';

-- 36 〈학생〉 테이블에서 '학번'과 '이름', 그리고 이름 중 성씨만 가져오는 SQL문을 작성하시오.
	SELECT 학번, 이름, LEFT(이름, 1) AS '성' 
    FROM 학생;
   
-- 37 〈학생〉 테이블에서 16학번인 학생의 학번과 이름, 학년을 가져오는 SQL문을 작성하시오.
	SELECT 학번, 이름, 학년 
    FROM 학생 
    WHERE 학번 LIKE '16%';
    
-- 38 <수강신청> 테이블에서 컴퓨터정보학과가 아닌 학생의 '수강신청번호', '학번','날짜'를 가져오는 SQL문을 작성하시오.
-- 내부 조인 형식으로 써도 된다.
	SELECT 수강신청번호, 학생.학번, 날짜
	FROM 수강신청, 학생, 학과
	WHERE 수강신청.학번 = 학생.학번 AND 학과.학과번호 = 학생.학과 AND 학과.학과명 <> '컴퓨터정보학과';

-- 39 <수강신청> 테이블에서 2018년 3월에 수강 신청한 레코드의 '수강신청번호', 학번', '날짜'를 가져오는 SQL문을 작성하시오.
	SELECT 수강신청번호, 학번, 날짜
    FROM 수강신청
    WHERE YEAR(날짜) = 2018 AND MONTH(날짜) = 03; 

-- 40 <수강신청내역> 테이블에서 평점이 입력되어 있는(평점'이 -1이 아닌) 레코드중 '수강신청번호', '과목번호', '평점'과 평점이 0이면 '미취득' 아니면 '취득'으로 출력하는 SQL문을 작성하시오.
	SELECT 수강신청번호, 과목번호, IF(평점=0, "미취득", "취득") AS 취득여부
    FROM 수강신청내역
	WHERE 평점 <> -1; 

-- 41 〈학생〉 테이블에서 이름'과 시도'를 하나로 묶어 필드명을 '이름'으로 읽어오는 SQL문을 작성하시오.
	SELECT CONCAT(이름, 시도) AS 이름 
    FROM 학생;

-- 42 <과목> 테이블에서 ‘담당교수'와 '과목명'을 국문과 영문으로 읽어오는 SQL문을작성하시오.
    SELECT 담당교수,  CONCAT(과목명, '(', 영문명, ')') AS 과목명 
    FROM 과목;

-- 43 <과목> 테이블에서 '과목명'과 화점', 그리고 한 화기를 15주라 가정했을 때 한 학기 총 수업 시간 수를 읽어오는 SQL문을 작성하시오.
    SELECT 과목명, 학점, (시수 * 15) AS '총 시간 수' 
    FROM 과목 
    ORDER BY 과목명;

-- 44 <학생> 테이블에서 '학번'과 이름에서 성씨(last name)를 뺀 이름(first name)을 출력하는 SQL문을 작성하시오.
	 SELECT 학번, RIGHT(이름, 2) AS 이름
     FROM 학생;

-- 45 <수강신청> 테이블에서 3월 1일 수강 신청한 데이터의 '학번'과 '날짜'를 출력하는 SQL문을 작성하시오
	SELECT 학번, 날짜 
    FROM 수강신청 
    WHERE MONTH(날짜) = 3 AND DAY(날짜) = 1;
    
-- 46 <학생> 테이블에서 아래 그림과 같이 '학번', '이름', 학과'와 컴퓨터정보학과인지 다른 학과인지를 출력하는 SQL문을 작성하시오.
	SELECT 학번, 이름, 학생.학과, IF(학과.학과명 = '컴퓨터정보학과', '컴퓨터공학과', '타과') AS 비고
    FROM 학생, 학과
    WHERE 학생.학과=학과.학과번호;

-- 47 〈수강신청내역〉 테이블에서 전체 행의 수(레코드의 수)를 계산하는 SQL문을 작성하시오
	SELECT COUNT(수강신청번호) AS '전체 행의 수' 
    FROM 수강신청내역;

-- 48 〈수강신청내역〉 테이블에서 '수강신청번호'가 '1810002'인 수강신청 레코드의 수를 계산하는 SQL문을 작성하시오.
	SELECT COUNT(*) 
    FROM 수강신청내역 
    WHERE 수강신청번호 = '1810002';

-- 49 <교수> 테이블에서 '전화번호'가 저장되어있는 교수의 수를 계산하는 SQL문을 작성하시오.
	SELECT COUNT(*) 
    FROM 교수 
    WHERE 전화번호 IS NOT NULL;

-- 50 <과목>테이블에서 과목을 담당하고 있는 교수가 몇명인가
	SELECT COUNT(DISTINCT 담당교수) AS 강의교수_수
	FROM 과목;

-- 51 <과목> 테이블에서 전체 과목의 학점의 평균과 합을 구하는 SQL문을 작성하시오.
	SELECT SUM(학점) AS '학점의 합', AVG(학점) AS '학점의 평균' 
    FROM 과목;

-- 52 <과목> 테이블의 과목 중에 최대 학점과 최소 학점을 구하는 SQL문을 작성하시오.
	SELECT MAX(학점) AS '최대 학점' , MIN(학점) AS '최소 학점' 
    FROM 과목;
    
-- 53 <과목> 테이블에서 교수별로 담당하고 있는 과목 수와 학점 합계를 출력하시오.
	SELECT 담당교수, COUNT(과목명) AS 과목수, SUM(학점) AS 학점수 
    FROM 과목 
    GROUP BY 담당교수;
-- 54〈수강신청내역> 테이블에서 수강 신청한 서로 다른 과목의 수가 몇 과목인지를 구하는 SQL문을 작성하시오.
	SELECT COUNT(DISTINCT 과목번호) AS '과목수' 
    FROM 수강신청내역;

-- 55 <수강신청> 테이블에서 수강 신청한 학생이 몇 명인지를 구하는 SQL문을 작성하시오.
	SELECT COUNT(학번) AS '학생 수' 
    FROM 수강신청;

-- 56 〈수강신청내역> 테이블에서 '수강신청번호' '1810001'의 신청 과목 수와 평균 평점을 구하는 SQL문을
	SELECT COUNT(DISTINCT 과목번호) AS '과목 수', AVG(평점) 
    FROM 수강신청내역 
    WHERE 수강신청번호 = '1810001';
